require('dotenv').config();

//
//   Config
//
//////////////////////////////////////////////////////////////////////

const paths = {
  dist: '<%= rootDistPath %>/',

  styleSrc: 'src/styles/',
  styleDist: '<%= rootDistPath %>/styles/',

  scriptSrc: 'src/scripts/',
  scriptDist: '<%= rootDistPath %>/scripts/',

  templateSrc: '<%= templateSrc %>',
  templateDist: '<%= templateDist %>',

  imageSrc: 'src/images/',
  imageDist: '<%= rootDistPath %>/images/',

  styleCopyPaths: [

  ],

  scriptCopyPaths: [
    'vendor'
  ]
};

module.exports = {
  paths: paths,

  // By default, Browsersync will create a dev server for you.
  // If you want BrowserSync to proxy an existing URL,
  // change `useProxy` to true and enter your URL as `proxyUrl`
  useProxy: <%= useProxy %>,
  proxyUrl: process.env.APP_SITE_URL || undefined,
  serverBaseDir: '<%= serverBaseDir %>',

  // @TODO: move this into package.json
  // in here because babel won't support it in there until v7
  browserlist: [
    '> 1%',
    'last 2 versions'
  ],

  scripts: {
    // Passed directly into webpack.ProvidePlugin
    // @see https://webpack.js.org/plugins/provide-plugin/
    provide: {
      $: 'jquery',
      jQuery: 'jquery',
      'window.jQuery': 'jquery'
    },


    // entry files:
    // each filename listed here (and found in scriptSrc)
    // will have a file generated for it in scriptDist
    // (with all of its dependencies included)

    // For every entry here, we'll look for a file in scriptSrc
    // with a matching name, and if found, a corresponding
    // foo.bundle.js file will be generated in scriptDist
    entryFiles: [
      'main'
    ],

    // aliases:
    // If you want an npm module to point to a
    // file other than the one defined in 'main.js'
    // within 'package.json', add an entry to 'aliases':
    //
    // aliases: {
    //   packagename: 'packagename/dist/package.pkgd.js'
    // }
    //
    // You can also use aliases to include files not installed via npm
    // (it will automatically look for this package in /src/scripts/vendor)
    //
    // aliases: {
    //   packagename: 'packagename.js'
    // }

    aliases: {

    },

    // Instantiate any additional webpack plugins here
    additionalWebpackplugins: [],

    // Set to false to disable hotModuleReplacement
    hot: true
  }
};
